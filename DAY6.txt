1)Array of objects using pointers
2)Arrow, new operator
3)This operator
4)Polymorphisim:- we cannot overload on the basiis of return type
-----------------------------------------------------

1)Compile Time Polymorphism

In compile-time polymorphism, it is already known which function will run. Compile-time polymorphism is also called early binding, which means that you are already bound to the function call and you
 know that this function is going to run. There are two types of compile-time polymorphism:
 
-->Function Overloading
This is a feature that lets us create more than one function and the functions have the same names but their parameters need to be different. If function overloading is done in the program and function calls are made 
the compiler already knows that which functions to execute.

-->Operator Overloading
This is a feature that lets us define operators working for some specific tasks. For example, we can overload the operator “+” and define its functionality to add two strings. Operator loading is also an example of 
compile-time polymorphism because the compiler already knows at the compile time which operator has to perform the task.

2)Run Time Polymorphism

In the run-time polymorphism, the compiler doesn’t know already what will happen at run time. Run time polymorphism is also called late binding. The run time polymorphism is considered slow because function 
calls are decided at run time. Run time polymorphism can be achieved from the virtual function.

-->Virtual Function
A function that is in the parent class but redefined in the child class is called a virtual function. “virtual” keyword is used to declare a virtual function.
-----------------------------------------------------
5)pointers to derived class
6)Base class ponter can be pointed to derived class object
7)we cannot access derived data members with the help of base class pointer 
8)Virtua; function
-----------------------------------------------------
*
Rules for virtual:-
1)They cannot be static
2)They are accessed by object pointers
3)Virtual functions can be a friend of another class
4)A virtual function in the base class might not be used.
5)If a virtual function is defined in a base class, there is no necessity of redefining it in the derived class
6)if virtual function is not redefined inside derived then base class virtual function will be accessed
-----------------------------------------------------
abstract class:- a class in which atleast one virtual function should be there
->Pure virtual function is a function that doesn’t perform any operation and the 
function is declared by assigning the value 0 to it. Pure virtual functions are declared in abstract classes.
->Abstract base class is a class that has at least one pure virtual function in its body. The classes which 
are inheriting the base class must need to override the virtual function of the abstract class otherwise compiler will throw 
an error.
----------------------------
this operator